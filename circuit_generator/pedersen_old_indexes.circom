
include "escalarmul.circom";

template Pedersen(n) {
    signal input in[n];
    signal output out[2];

    var nexps = ((n-1) \ 250) + 1;
    var nlastbits = n - (nexps-1)*250;

    component escalarMuls[nexps];

    var PBASE = [[16113908992958654580576121332105641939386785007070631827837038721187369061406,
  13543135889321786196419170914180430694274295243334629701622351182531864521005],
 [16627001262217752418232399229085639463508031460877751193558076525766939746290,
  11293652998871813128673002603563161847178345330386607075500167792306707414784],
 [13767260734734474739001976441109696104935454744751485173007370998306247492837,
  7277100362785830115685758358246384145272350050315302288606808934579002798170],
 [5168666886441176511838430760090984216786231009368839315781763235428028670684,
  3540433457622386931934945079292210609637634993709224481925029112076460456996],
 [17046338648613415398615213812309234521849044588294307506973008689438840217899,
  14272669301071735679182285797323588275064578318544636168261104544792101541990]];
        
    var i;
    var j;
    var nexpbits;
    for (i=0; i<nexps; i++) {
        nexpbits = (i == nexps-1) ? nlastbits : 250;
        escalarMuls[i] = EscalarMul(nexpbits, PBASE[i]);

        for (j=0; j<nexpbits; j++) {
            escalarMuls[i].in[j] <== in[250*i + j];
        }

        if (i==0) {
            escalarMuls[i].inp[0] <== 0;
            escalarMuls[i].inp[1] <== 1;
        } else {
            escalarMuls[i].inp[0] <== escalarMuls[i-1].out[0];
            escalarMuls[i].inp[1] <== escalarMuls[i-1].out[1];
        }
    }

    escalarMuls[nexps-1].out[0] ==> out[0];
    escalarMuls[nexps-1].out[1] ==> out[1];
}