import fire
import numpy as np

points = [
    [16540640123574156134436876038791482806971768689494387082833631921987005038935,20819045374670962167435360035096875258406992893633759881276124905556507972311],
    [16113908992958654580576121332105641939386785007070631827837038721187369061406,13543135889321786196419170914180430694274295243334629701622351182531864521005],
    [1076620697199135180779993208327990452191184083362380553163440209762849514722,9853647717691139336869472377314617825232074251805086035693773616712748042621],
    [16627001262217752418232399229085639463508031460877751193558076525766939746290,11293652998871813128673002603563161847178345330386607075500167792306707414784],
    [17193433650870834145767552013187426225541809928144693031023390964075029712734,5072569689932329450279131871579186295141413025474978915530995363951190322881],
    [4873235912926533530309568745817380743686540272116562512062487934223913563495,20887932140417543826962958973692455850672178541440622622454994848671306619256],
    [13767260734734474739001976441109696104935454744751485173007370998306247492837,7277100362785830115685758358246384145272350050315302288606808934579002798170],
    [5168666886441176511838430760090984216786231009368839315781763235428028670684,3540433457622386931934945079292210609637634993709224481925029112076460456996],
    [17046338648613415398615213812309234521849044588294307506973008689438840217899,14272669301071735679182285797323588275064578318544636168261104544792101541990],
    [6103107088791296435663387020164733811397570791509925308172821397187679660537,20157929798032613907880757565781377612126801225727980602298341328786303458379],
    [565031082270784511526969856259883151926356254071667969886730963860599728056,14351326155628442688947194939783765682844161210398113742490075739781323640871],
    [1878074526134353812641663603934698101461986157998056830302811006883988187476,5565682932474786197900781172367838372598722114471922169620164749116211930418],
    [13672169211433958273621238439911098016168010235805679272891906788825906767477,16993769844209052488906232590926697127416351186634421476666285502971626970799],
    [8786223216203880201224432554831626947213331095198567432758715078977508525796,16797242172883548168306567617635110425492927504670010689612741788509959995399],
    [19511309402973225262220917535135014365437820143921553826584252488702725453571,9338977329665951798955457617712647275145997611482141302608593432255344579057],
    [16028196540354630930568165251687951500491621991802323119452548785930915528076,18645848113938245520223945248697200125633399343990508671600304297984017349160],
    [19742431422261785319802821264201579700941162512642502337867718752917066272640,536084822077324023932884466004395638775832375297641821069560863946633279466],
    [14746857159778379625020692419257609100427724837329870240615509615917072852253,7425274762180503574751542408424612279826320412501428803476842575167052357727],
    [20889720887632746108337230904734401090249084928639392128409710264031189168079,7374404549650513296245607667385829743858871232666564805397932455623504294931],
    [11456585778581014417551378754926360274765118796288219726069431816759660290973,3742731251980531555285474025831654734487023770305417749240256628868846389433],
    [1053825478491259598928875231158071559648900247213065117000464156362957297198,7750617224000830369483777989476229656733788257200638169878226052413733766319]
    ]

numpied_points = np.array(points)


def smart_contract_pedersen(pub, priv, indexes):

    order_points = numpied_points[list(indexes)]

    circuit = """include "pedersen_old_indexes.circom";
include "bitify.circom";
include "eddsa.circom";

template Main(n, k) {
    signal input in[n];
    signal input A[256];

    signal private input secret[k];
    signal private input priv;
    signal private input R8[256];
    signal private input S[256];

    component pedersen = Pedersen(250*(n+k+1));
    var i;
    var j;

    component n2a[n];
    for  (i=0; i<n; i++) {
        n2a[i] = Num2Bits(250);
        in[i] ==> n2a[i].in;
    }
    for (j = 0; j<n; j++){
        for  (i=0; i<250; i++) {
            n2a[j].out[i] ==> pedersen.in[j*250+i];
        }
    }
    component n2b[n];
    for  (i=0; i<k; i++) {
        n2b[i] = Num2Bits(250);
        secret[i] ==> n2b[i].in;
    }
    for (j = 0; j<k; j++){
        for  (i=0; i<250; i++) {
            n2b[j].out[i] ==> pedersen.in[(n+j)*250+i];
        }
    }

    component n2c = Num2Bits(250);
    priv ==> n2c.in;
    for  (i=0; i<250; i++) {
        n2c.out[i] ==> pedersen.in[(n+k)*250+i];
    }

    component eddsa = EdDSAVerifier(250);
    component n2d = Num2Bits(250);
    pedersen.out[0] ==> n2d.in;

    for  (i=0; i<250; i++) {
        n2d.out[i] ==> eddsa.msg[i];
    }

    for  (i=0; i<256; i++) {
        A[i] ==> eddsa.A[i];
        R8[i] ==> eddsa.R8[i];
        S[i] ==> eddsa.S[i];    
    }
}

component main = Main("""+str(pub)+""", """+str(priv)+""");"""

    with open('smart_contract.circom', 'w') as f:
        f.write(circuit)

    perdersen_indexed = """
include "escalarmul.circom";

template Pedersen(n) {
    signal input in[n];
    signal output out[2];

    var nexps = ((n-1) \ 250) + 1;
    var nlastbits = n - (nexps-1)*250;

    component escalarMuls[nexps];

    var PBASE = """+np.array2string(order_points, separator=',')+""";
        
    var i;
    var j;
    var nexpbits;
    for (i=0; i<nexps; i++) {
        nexpbits = (i == nexps-1) ? nlastbits : 250;
        escalarMuls[i] = EscalarMul(nexpbits, PBASE[i]);

        for (j=0; j<nexpbits; j++) {
            escalarMuls[i].in[j] <== in[250*i + j];
        }

        if (i==0) {
            escalarMuls[i].inp[0] <== 0;
            escalarMuls[i].inp[1] <== 1;
        } else {
            escalarMuls[i].inp[0] <== escalarMuls[i-1].out[0];
            escalarMuls[i].inp[1] <== escalarMuls[i-1].out[1];
        }
    }

    escalarMuls[nexps-1].out[0] ==> out[0];
    escalarMuls[nexps-1].out[1] ==> out[1];
}"""

    with open('pedersen_old_indexes.circom', 'w') as f:
        f.write(perdersen_indexed)


def authority_circuit(pub):

	circuit = """include "pedersen_old.circom";
include "bitify.circom";

template Main(n) {
    signal private input priv;
    signal input in[n];

    signal output out[2];

    component pedersen = Pedersen(250*(n+1));
    var i;
    var j;

    component n2a[n];
    for  (i=0; i<n; i++) {
        n2a[i] = Num2Bits(250);
        in[i] ==> n2a[i].in;
    }
    for (j = 0; j<n; j++){
    	for  (i=0; i<250; i++) {
            n2a[j].out[i] ==> pedersen.in[j*250+i];
        }
    }
    component n2b;
    n2b = Num2Bits(250);
    priv ==> n2b.in;

	for  (i=0; i<250; i++) {
        n2b.out[i] ==> pedersen.in[n*250+i];
    }

    pedersen.out[0] ==> out[0];
    pedersen.out[1] ==> out[1];
}

component main = Main("""+str(pub)+""");"""

	with open('authority_circuit.circom', 'w') as f:
		f.write(circuit)

if __name__ == '__main__':
  fire.Fire({
      'authority': authority_circuit,
      'contract': smart_contract_pedersen,
  })